{"version":3,"sources":["components/Navbar.tsx","services/marketo.ts","components/Result.tsx","components/Search.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Navbar","id","services","getList","uuid","axios","get","then","response","data","getCoin","coinID","params","testService","getAllServer","url","searchService","searchTerm","Result","showCoin","results","console","log","length","map","item","idx","ticker","onClick","e","currentTarget","handleCoinSelection","name","Search","useState","setSearchTerm","setShowCoin","setResults","TextField","variant","type","autoComplete","onChange","target","value","Button","marketoService","App","pageURL","window","location","href","split","useEffect","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6MAQeA,MARf,WACI,OACI,qBAAKC,GAAG,SAAR,8C,yBCiCOC,EARE,CACbC,QA1BY,SAACC,GAEb,OADgBC,IAAMC,IAAN,sBAAyBF,IAC1BG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAyBzCC,QAtBY,SAACC,GAEb,OADgBN,IAAMC,IAAN,gBAAmBK,GAAU,CAACC,OAAQD,IACvCJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAqBzCI,YAlBgB,WAEhB,OADgBR,IAAMC,IAAN,gBACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAiBzCK,aATiB,SAACC,GAElB,OADgBV,IAAMC,IAAN,eAAkBS,IACnBR,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQzCO,cAfkB,SAACC,GAEnB,OADgBZ,IAAMC,IAAN,eAA0B,CAACM,OAAQK,IACpCV,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UCwB9BS,MAvBf,YAAkD,IAAjCC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,QAQvB,OADAC,QAAQC,IAAI,gBAAiBF,GAC1BD,EACuB,IAAnBC,EAAQG,OACA,qDAGP,8BACKH,EAAQI,KAAI,SAACC,EAAMC,GAAP,OAAe,sBAAezB,GAAIwB,EAAKE,OAAQC,QAAS,SAACC,GAAD,OAXrD,SAACA,GACzBR,QAAQC,IAAI,eAAgBO,EAAEC,cAAc7B,IAUwC8B,CAAoBF,IAApE,UAAyEJ,EAAKO,KAA9E,KAAsFP,EAAKE,OAA3F,QAAUD,QAKrC,yC,kBCCFO,MAhCf,WAA8B,IAAD,EACaC,mBAAS,IADtB,mBACjBjB,EADiB,KACLkB,EADK,OAESD,oBAAS,GAFlB,mBAEjBf,EAFiB,KAEPiB,EAFO,OAGOF,mBAAS,IAHhB,mBAGjBd,EAHiB,KAGRiB,EAHQ,KAkBzB,OACI,gCACI,sBAAKpC,GAAG,SAAR,UACI,cAACqC,EAAA,EAAD,CAAWrC,GAAG,iBAAiBsC,QAAQ,WAAWC,KAAK,OAAOC,aAAa,MAAMC,SAAU,SAACb,GAAOM,EAAcN,EAAEc,OAAOC,UAE1H,cAACC,EAAA,EAAD,CAAQN,QAAQ,YAAYX,QAlBnB,WAUjB,OATAP,QAAQC,IAAI,aACZD,QAAQC,IAAIL,GACZ6B,EACK9B,cAAcC,GACdV,MAAK,SAAAC,GACFa,QAAQC,IAAI,gBAAiBd,GAC7B4B,GAAY,GACZC,EAAW7B,OAEZ,GAQC,uBAEJ,qBAAKP,GAAG,UAAR,SACI,cAAC,EAAD,CAAQkB,SAAUA,EAAUC,QAASA,U,OCLtC2B,MArBf,WACE,IAAIC,EAAWC,OAAOC,SAASC,KAAMC,MAAM,KAAK,GAYhD,OAXAJ,EAAUA,EAAQI,MAAM,KAAK,GAC7B/B,QAAQC,IAAI,UAAW0B,GAQvBK,qBANa,WACXP,EACGhC,aAAakC,GACbzC,MAAK,SAAAC,GAAQ,OAAIa,QAAQC,IAAI,WAAYd,SAM5C,sBAAKP,GAAG,MAAR,UACE,cAAC,EAAD,IACA,cAAC,EAAD,QCVSqD,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBjD,MAAK,YAAkD,IAA/CkD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.09976910.chunk.js","sourcesContent":["function Navbar():JSX.Element {\n    return(\n        <div id=\"navbar\">\n            CryptoMarketo nav bar goes here \n        </div>\n    )\n}\n\nexport default Navbar","import axios from 'axios'\n\nconst getList = (uuid:string) => {\n    const request = axios.get(`/api/myList/${uuid}`)\n    return request.then(response => response.data)\n}\n\nconst getCoin = (coinID:string) => {\n    const request = axios.get(`/coin/${coinID}`, {params: coinID})\n    return request.then(response => response.data)\n} \n\nconst testService = () => {\n    const request = axios.get(`/api/testing`);\n    return request.then(response => response.data)\n}\n\nconst searchService = (searchTerm:string) => {\n    const request = axios.get(`/api/search/`, {params: searchTerm})\n    return request.then(response => response.data)\n}\n\nconst getAllServer = (url:string) => {\n    const request = axios.get(`/api/${url}`)\n    return request.then(response => response.data)\n}\n\nconst services = {\n    getList, \n    getCoin,\n    testService,\n    getAllServer,\n    searchService\n};\n\nexport default services;","import * as React from \"react\"\nimport { useParams } from \"react-router-dom\"\nimport { resourceLimits } from \"worker_threads\"\nimport Coin from \"./Coin\"\nimport { CoinName } from '../types'\n\ntype ResultProps = {\n    showCoin: boolean,\n    results: CoinName[],\n}\n/**\n * Result returns component that lists out max 10 search results\n * Originally wanted to have search happen onChange with drop down below\n * search bar for user to click, however free-tier API limits calls to 5/min\n * making this feature not feasible\n * @param showCoin \n * @param results\n * @returns \n */\n\nfunction Result({showCoin, results}:ResultProps) {\n    // const { id } = useParams();\n    // set variable to return value from API call \n    const handleCoinSelection = (e:React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n        console.log('clicked this', e.currentTarget.id)\n        // use this variable to then search and populate new page with coin information \n    }\n    console.log('inside result', results)\n    if(showCoin){\n        if(results.length === 0){\n            return(<div>No result found!!~</div>)\n        }\n        return(\n            <div>\n                {results.map((item, idx) => <div key={idx} id={item.ticker} onClick={(e) => handleCoinSelection(e)}>{item.name} ({item.ticker})!!</div>)}\n            </div>\n        )\n    }\n\n    else return (<div>empty</div>)\n    \n}\n\nexport default Result","// TODO: add search bar api here\nimport { useState } from 'react';\nimport marketoService from '../services/marketo'\nimport Result from './Result'\nimport ReactDOM from 'react-dom';\nimport { Button, TextField } from '@mui/material';\n\n\nfunction Search():JSX.Element{\n    const [ searchTerm, setSearchTerm ] = useState('')\n    const [ showCoin, setShowCoin ] = useState(false)\n    const [ results, setResults ] = useState([])\n\n    const handleSearch = () => {\n        console.log('searching')\n        console.log(searchTerm)\n        marketoService\n            .searchService(searchTerm)\n            .then(response => {\n                console.log('search result', response);\n                setShowCoin(true)\n                setResults(response)\n            })\n        return false;\n    }\n\n    return(\n        <div>\n            <div id=\"search\">\n                <TextField id=\"outlined-basic\" variant=\"outlined\" type=\"text\" autoComplete=\"off\" onChange={(e) => {setSearchTerm(e.target.value)}}>\n                </TextField>\n                <Button variant=\"contained\" onClick={handleSearch}>Search</Button>\n            </div>\n            <div id=\"results\">\n                <Result showCoin={showCoin} results={results}/>\n            </div>\n        </div>\n    )\n}\n\nexport default Search","import { useEffect } from 'react';\nimport Navbar from './components/Navbar'\nimport Search from './components/Search'\nimport marketoService from './services/marketo'\nimport './App.css';\n\n\n\nfunction App() {\n  let pageURL = (window.location.href).split('/')[3]\n  pageURL = pageURL.split('?')[0]\n  console.log('pageurl', pageURL)\n\n  const hook = () => {\n    marketoService  \n      .getAllServer(pageURL)\n      .then(response => console.log('frontend', response))\n  }\n\n  useEffect(hook, )\n\n  return (\n    <div id=\"App\">\n      <Navbar/>\n      <Search/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}